* B. Practice 3
** 1. Start ~Goloop~ local node
#+BEGIN_SRC bash
cd gochain-local
sudo ./run_gochain.sh start
export PATH=$PATH:/$HOME/goloop/bin
#+END_SRC

** 2. Build and optimize the jar
#+BEGIN_SRC bash
sudo ./gradlew build
sudo ./gradlew optimizedJar
#+END_SRC

** 3. Deploy the optimized jar
*** Input
#+BEGIN_SRC bash
goloop rpc sendtx deploy ./gallery/build/libs/gallery-0.1.0-optimized.jar \
    --uri http://127.0.0.1:9082/api/v3 \
    --key_store /$HOME/gochain-local/data/godWallet.json --key_password gochain \
    --nid 0x3 --step_limit 10000000000 \
    --content_type application/java
#+END_SRC

*** Result
#+BEGIN_SRC bash
"0x838a4274232cd4acd7fa67e1c4926d87e3ac9f65f46f82ee3428c1ebb2a8f12d"
#+END_SRC

** 4. Get transaction detail
*** Input
#+BEGIN_SRC bash
goloop rpc \
    --uri http://localhost:9082/api/v3 txresult 0xdd9a4e895396829f0c16bf215bb483f458131256d68d43ffeb4d1d13556833a3
#+END_SRC

*** Result
{
  "to": "cx0000000000000000000000000000000000000000",
  "cumulativeStepUsed": "0x48bc404d",
  "stepUsed": "0x48bc404d",
  "stepPrice": "0x2e90edd00",
  "eventLogs": [],
  "logsBloom": "0x
  "status": "0x1",
  "scoreAddress": "cx49f77bcbc89176f00d8fa36f18179fe681faab53",
  "blockHash": "0xc0c90974e12ac82238bfe55337e1b7788ba05eb1375a3f8ea80fe2980d0a7585",
  "blockHeight": "0x4b0b",
  "txIndex": "0x0",
  "txHash": "0x838a4274232cd4acd7fa67e1c4926d87e3ac9f65f46f82ee3428c1ebb2a8f12d"
}
#+END_SRC

** 5. Call to contract (method ~getVoteCount~)
*** Input
#+BEGIN_SRC bash
goloop rpc \
    --uri http://localhost:9082/api/v3 call \
    --to cxdeeb5b463713873e3584bd34794170f4a1e0a989  \
    --method userGallery
#+END_SRC

*** Result
#+BEGIN_SRC bash
"0x0"
#+END_SRC




** 6. Send to contract (method ~Vote~)
*** Input
#+BEGIN_SRC bash
goloop rpc sendtx call \
    --to cx49f77bcbc89176f00d8fa36f18179fe681faab53 \
    --uri http://127.0.0.1:9082/api/v3 \
    --key_store /$HOME/gochain-local/data/godWallet.json \
    --key_password gochain \
    --nid 0x3 --step_limit 10000000 \
    --method createNFT \
    --param _ipfs=aswdqe \
    --param _price=12000 \
    --param _onSale=1 \
    --param _visibility=1
#+END_SRC

*** Result
#+BEGIN_SRC bash
"0x5771fca557b29a532d65a1cec9665155a62f0765a9de8719f65335bec5478176"
#+END_SRC


** 4. Get transaction detail
*** Input
#+BEGIN_SRC bash
goloop rpc \
    --uri http://localhost:9082/api/v3 txresult 0x85e1bef5087919376a03edab02de74a7dfe00302862304aab1e9e6db4d1ea604
#+END_SRC

** 6. Send to contract (method ~Vote~)
*** Input
#+BEGIN_SRC bash
goloop rpc sendtx call \
    --to cx49f77bcbc89176f00d8fa36f18179fe681faab53 \
    --uri http://127.0.0.1:9082/api/v3 \
    --key_store /$HOME/gochain-local/data/godWallet.json \
    --key_password gochain \
    --nid 0x3 --step_limit 10000000 \
    --method createCollection \
    --param _timestamp=123 \
    --param _name=12000 \
    --param _description=113123 \
    --param _visibility=1
#+END_SRC

*** Result
#+BEGIN_SRC bash
"0x5771fca557b29a532d65a1cec9665155a62f0765a9de8719f65335bec5478176"
#+END_SRC


** 4. Get transaction detail
*** Input
#+BEGIN_SRC bash
goloop rpc \
    --uri http://localhost:9082/api/v3 txresult 0xeef65326d0293772a789072a590ea93d7b7a95346a7ad0dbb8b744f41e51eac7
#+END_SRC




** 7. Call to contract (method ~addresses~)
*** Input
#+BEGIN_SRC bash
goloop rpc sendtx call \
    --to cx49f77bcbc89176f00d8fa36f18179fe681faab53 \
    --uri http://127.0.0.1:9082/api/v3 \
    --key_store /$HOME/gochain-local/data/godWallet.json \
    --key_password gochain \
    --nid 0x3 --step_limit 10000000 \
    --method handleSelling \
    --param ipfs=aswdqe \
    --param price=1200000
#+END_SRC

*** Result
#+BEGIN_SRC bash
"0x0"
#+END_SRC